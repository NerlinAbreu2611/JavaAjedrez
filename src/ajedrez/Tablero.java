/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ajedrez;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.*;

/**
 *
 * @author elmen
 */
public class Tablero extends javax.swing.JFrame implements  MouseListener  {

    /**
     * Creates new form Tablero
     */
    
    
    private ArrayList<PanelCasilla> movimientos = new ArrayList<>();
    private ArrayList<Color> coloresAntiguos = new ArrayList<>();
    
    private Color marron = new Color(139,69,19);
    private Color  blanco = Color.WHITE;
    public Tablero() {
        initComponents();
        panelBase.setBackground(marron);
        this.setTitle("Tablero de ajedrez");
        crearTablero();
        this.setLocationRelativeTo(null);
        this.agregarEventosCasillas();
        this.agregarFichas();
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
    
    private  PanelCasilla [][] matrizCasillas = new PanelCasilla[8][8];
    public void crearTablero(){
        panelBase.setLayout(null);
        panelTablero.setBounds(10, 10, panelBase.getWidth() - 20, panelBase.getHeight() - 20);
        panelTablero.setLayout(new GridLayout(8,8));
       
        
        for(int i = 0;i<8;i++){
            for(int j=0;j<8;j++){
                PanelCasilla casilla = new PanelCasilla(panelTablero);
                if((i+j) % 2 == 0){
                    casilla.setBackground(marron);
                }else{
                    casilla.setBackground(blanco);
                }
                matrizCasillas[i][j] = casilla;
                panelTablero.add(casilla);
            }
        }
    }
    
    private void agregarFichas(){
        Ficha ficha = new Peon("negro","C:\\Users\\elmen\\Desktop\\Ajedrez\\JavaAjedrez\\src\\imagenes\\peon (1).png");
        this.matrizCasillas[6][3].setFicha(ficha);
        Ficha ficha3 = new Peon("blanco","C:\\Users\\elmen\\Desktop\\Ajedrez\\JavaAjedrez\\src\\imagenes\\peon.png");
        this.matrizCasillas[3][4].setFicha(ficha3);
        Ficha ficha2 = new Peon("blanco","C:\\Users\\elmen\\Desktop\\Ajedrez\\JavaAjedrez\\src\\imagenes\\peon.png");
        this.matrizCasillas[3][2].setFicha(ficha2);

       /* ImageIcon imagen = new ImageIcon("");
        Icon icono = new ImageIcon(imagen.getImage().getScaledInstance((this.getWidth() / 8) - 10, (this.getHeight() / 8) - 10, 1));

        this.matrizCasillas[3][2].getCasilla().setIcon(icono);*/
    }
    
    private boolean turnoBlanco = true;
    private boolean turnoNegro = false;
    
    
    public void agregarEventosCasillas(){
        for (int i = 0; i < matrizCasillas.length; i++) {
            for (int j = 0; j < matrizCasillas.length; j++) {  
                matrizCasillas[i][j].addMouseListener(this);
            }
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBase = new javax.swing.JPanel();
        panelTablero = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelBase.setRequestFocusEnabled(false);

        javax.swing.GroupLayout panelTableroLayout = new javax.swing.GroupLayout(panelTablero);
        panelTablero.setLayout(panelTableroLayout);
        panelTableroLayout.setHorizontalGroup(
            panelTableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 638, Short.MAX_VALUE)
        );
        panelTableroLayout.setVerticalGroup(
            panelTableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 458, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelBaseLayout = new javax.swing.GroupLayout(panelBase);
        panelBase.setLayout(panelBaseLayout);
        panelBaseLayout.setHorizontalGroup(
            panelBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBaseLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(panelTablero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );
        panelBaseLayout.setVerticalGroup(
            panelBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBaseLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(panelTablero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelBase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelBase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tablero().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panelBase;
    private javax.swing.JPanel panelTablero;
    // End of variables declaration//GEN-END:variables
    
    private Color verde = Color.GREEN;
    
    @Override
    public void mouseClicked(MouseEvent e) {
        PanelCasilla panel = (PanelCasilla) e.getSource();
      //  System.out.println(panel.getFicha().getTipo());
      
      if(panel.getFicha() != null || panel.getBackground().equals(verde)){
          
          
          if(tipo(panel).equals("peon")){
                moverPeones(panel);
          }
      }else{
          
      }
      
      
             //if(panel.getFicha().getEquipo().e) 
          
       
      
        
        
    }
    
    public String tipo(PanelCasilla panel){
        
        String tipo = " ";
        
        if(movimientos.isEmpty()){
          
            tipo = panel.getFicha().getTipo();
         
        }else{
        for(PanelCasilla i: movimientos){
            if(i.getFicha() != null){
                tipo = i.getFicha().getTipo();
            }
        }        
        }
        
       
        
        return tipo;
        
    }
    
    public void moverPeones(PanelCasilla panel){
        if(panel.getFicha() != null){
           
            
            
            if(movimientos.isEmpty()){
         
                 panel.getFicha().mover(matrizCasillas,this.movimientos, this.coloresAntiguos);
                
            }else{
                limpiarMovimientos(panel);
            }
           
            
            
            
        }else{
            if(panel.getBackground().equals(verde)){
                
                for(PanelCasilla i: movimientos){
                    if(i.getFicha() != null){
                        if(i.getFicha().getTipo().equalsIgnoreCase("peon")){
                            Peon p = (Peon) i.getFicha();
                             p.setInicio(true);
                        }
                    }
                }
                        
                
               
                trasladarFicha(panel);
            }
          
        }
    }
    
    
    public void trasladarFicha(PanelCasilla panel){
        Iterator<PanelCasilla> i = movimientos.iterator();
        PanelCasilla anterior = i.next();
        panel.setFicha(anterior.getFicha());
        anterior.eliminarFicha();
        
        int c = 0;

        for (PanelCasilla j : movimientos) {
            if (j.getBackground().equals(verde) || j.getBackground().equals(Color.red)) {
                j.setBackground(coloresAntiguos.get(c));
                c++;
            }

        }
        
        

        movimientos.clear();
        coloresAntiguos.clear();

        
    }

    
    public void limpiarMovimientos(PanelCasilla panel){
         int c = 0;
          Iterator<PanelCasilla> i = movimientos.iterator();
                if(panel.getFicha().equals(i.next().getFicha())){
                  
                    for(PanelCasilla j: movimientos){
                       if(j.getBackground().equals(verde) || j.getBackground().equals(Color.red)){
                        j.setBackground(coloresAntiguos.get(c));                        
                         c++;
                       }
                      
                     }
                  
                    movimientos.clear();
                    coloresAntiguos.clear();
            
                }
    }
    
    @Override
    public void mousePressed(MouseEvent e) {
       
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        
    }

    @Override
    public void mouseEntered(MouseEvent e) {
      
    }

    @Override
    public void mouseExited(MouseEvent e) {
     
    }
}
